# This workflow tests the PiWind expected results from 'tests/ci/expected'
# its tested using 'tests/test_piwind_integration.py' which runs a set of
# checks using the OasisLMF API client
#  vs the docker-compose file `docker-compose.yml` and ENV variables
#    SERVER_IMG: server image name "coreoasis/api_server"
#    SERVER_TAG: server image tag  "latest"
#    WORKER_IMG: worker image name "coreoasis/model_worker"
#    WORKER_TAG: worker image tag  ""latest
#

name: PiWind Integration

on:
  workflow_dispatch:
    inputs:
      server_image:
        description: 'Server image [coreoasis/api_server]'
        required: false
        default: 'coreoasis/model_worker'
      server_tag:
        description: 'Server tag [semvar]'
        required: false
        default: 'latest'
      worker_image:
        description: 'Worker image [coreoasis/model_worker]'
        required: false
        default: 'coreoasis/model_worker'
      worker_tag:
        description: 'Worker image [semvar]'
        required: false
        default: 'latest'
      debug_mode:
        description: 'Enable verbose logging for containers [0, 1]'
        required: false
        default: '1'

      # If set build a piwind worker with / branch package
      # otherwise use the default worker image
      oasislmf_branch:
        description: "Branch from oasislmf to test piwind with [git ref]"
        required: false
      oasislmf_package:
        description: "Oasislmf package build to test [pkg_filename]"
        required: false
      ods_branch:
        description: "ods_tools package build to test [pkg_filename]"
        required: false
      ods_package:
        description: "ods_tools package build to test [pkg_filename]"
        required: false

  workflow_call:
    inputs:
      piwind_branch:
        description: 'PiWind branch to test'
        type: string
      server_image:
        description: 'Server image [coreoasis/api_server]'
        required: false
        type: string
      server_tag:
        description: 'Server tag [semvar]'
        required: false
        type: string
      worker_image:
        description: 'Worker image [coreoasis/model_worker]'
        required: false
        type: string
      worker_tag:
        description: 'Worker image [semvar]'
        required: false
        type: string
      debug_mode:
        description: 'Enable verbose logging for containers [0, 1]'
        required: false
        type: string
      pytest_opts:
        description: 'pass extra options to pytest'
        required: false
        type: string
      storage_suffix:
        description: 'Edit storage name'
        required: false
        type: string
      generate_results:
        description: 'Instead of test, create new results [true, false]'
        required: false
        type: string


      # If set build a piwind worker with / branch package
      # otherwise use the default worker image
      oasislmf_branch:
        description: "Branch from oasislmf to test piwind with [git ref]"
        required: false
        type: string
      oasislmf_package:
        description: "Oasislmf package build to test [pkg_filename]"
        required: false
        type: string
      ods_branch:
        description: "Branch from ods-tools to test piwind with [git ref]"
        required: false
        type: string
      ods_package:
        description: "ods_tools package build to test [pkg_filename]"
        required: false
        type: string

jobs:
  check_results:
    runs-on: ubuntu-latest
    name: Run Pytest
    env:
      DOCKERFILE: 'docker/Dockerfile.piwind_worker'
      PIWIND_BRANCH: ${{ github.ref_name }}
      SERVER_IMG: 'coreoasis/api_server'
      SERVER_TAG: 'latest'
      WORKER_IMG: 'coreoasis/model_worker'
      WORKER_TAG: 'latest'
      DEBUG: 1

    steps:
    # Don't allow results generation to break dev/master -->> only accept update as PR
    - name: Test branch for result gen
      if: ${{ inputs.generate_results == 'true' &&
        startsWith(github.ref_name , 'main') &&
        startsWith(github.ref_name, 'stable/') }}
      run: |
        echo "Result generation must not be directly executed on protected branches, run on a PR branch"
        exit 1

    - name: Set inputs
      run: |
       [[ -z "${{ inputs.piwind_branch }}" ]] || echo "PIWIND_BRANCH=${{ inputs.piwind_branch }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.server_image }}" ]] || echo "SERVER_IMG=${{ inputs.server_image }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.server_tag }}"   ]] || echo "SERVER_TAG=${{ inputs.server_tag }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.worker_image }}" ]] || echo "WORKER_IMG=${{ inputs.worker_image }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.worker_tag }}"   ]] || echo "WORKER_TAG=${{ inputs.worker_tag }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.debug_mode }}"   ]] || echo "DEBUG=${{ inputs.debug_mode }}" >> $GITHUB_ENV

    - name: clone PiWind repository
      uses: actions/checkout@v3
      with:
        repository: OasisLMF/OasisPiWind
        ref: ${{ env.PIWIND_BRANCH }}

    - name: check oasislmf build arg
      if: inputs.oasislmf_package != '' || inputs.oasislmf_branch != ''
      run: |
        if [[ -n "${{ inputs.oasislmf_package }}" && -n "${{ inputs.oasislmf_branch }}" ]]; then
          echo "set either 'oasislmf_package' or 'oasislmf_branch' not both"
          exit 1
        fi

    - name: check ods-tools build arg
      if: inputs.ods_package != '' || inputs.ods_branch != ''
      run: |
        if [[ -n "${{ inputs.ods_package }}" && -n "${{ inputs.ods_branch }}" ]]; then
          echo "set either 'ods_package' or 'ods_branch' not both"
          exit 1
        fi

    - name: Download package (oasislmf)
      if: inputs.oasislmf_package != ''
      uses: actions/download-artifact@v3
      with:
        name: oasislmf-bin-pkg_linux
        path: ${{ github.workspace }}/

    - name: Download package (ods_tools)
      if: inputs.ods_package != ''
      uses: actions/download-artifact@v3
      with:
        name: bin_package
        path: ${{ github.workspace }}/

    - name: replace default image with input
      if: inputs.oasislmf_package != '' || inputs.oasislmf_branch != '' || inputs.ods_package != ''
      run: sed -i "/FROM /c\FROM ${{ env.WORKER_IMG }}:${{ env.WORKER_TAG }}" ${{ env.DOCKERFILE }}

    - name: Docker Build
      if: inputs.oasislmf_package != '' || inputs.oasislmf_branch != '' || inputs.ods_package != '' || inputs.ods_branch != ''
      run: |
        docker build -f ${{ env.DOCKERFILE }} \
                     --pull \
                     --build-arg oasislmf_package=${{ inputs.oasislmf_package }} \
                     --build-arg oasislmf_branch=${{ inputs.oasislmf_branch }} \
                     --build-arg ods_package=${{ inputs.ods_package }} \
                     --build-arg ods_branch=${{ inputs.ods_branch }} \
                     -t ${{ env.WORKER_IMG }}:piwind-test-${{ github.sha }} .

    - name: Override Worker image env
      if: inputs.oasislmf_package != '' || inputs.oasislmf_branch != '' || inputs.ods_package != ''
      run: echo "WORKER_TAG=piwind-test-${{ github.sha }}" >> $GITHUB_ENV

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: install test deps
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        pip-compile tests/requirements.in -o tests/requirements.txt
        pip install -r tests/requirements.txt

    - name: Run Checks
      if: inputs.generate_results != 'true'
      run: pytest -v --use-running-containers ${{ inputs.pytest_opts }}

    - name: Create results
      if: inputs.generate_results == 'true'
      run: pytest -v --use-running-containers --generate-expected ${{ inputs.pytest_opts }}

    - name: Setup github user
      if: inputs.generate_results == 'true'
      run: |
        git config --global user.email ${{ env.GIT_EMAIL }}
        git config --global user.name ${{ env.GIT_USERNAME }}
        git config --global pull.ff only
      env:
        GIT_EMAIL: ${{ secrets.BUILD_GIT_EMAIL }}
        GIT_USERNAME: ${{ secrets.BUILD_GIT_USERNAME }}

    - name: Commit results
      if: inputs.generate_results == 'true'
      run: |
        git add -A tests/ci/expected
        git status
        if [[ ! -z $(git status -s) ]]; then
            git commit -m 'Regenerated expected results - https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            git push
        else
            echo 'No changes detected'
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.BUILD_GIT_TOKEN }}

    - name: Create docker logs
      if: always()
      run: |
         mkdir -p docker_logs
         docker ps --format '{{.Names}}' | xargs -I CONTAINER bash -c "docker logs CONTAINER >> docker_logs/CONTAINER.log 2>&1"
         docker ps -aq | xargs -r docker stop
         docker ps -aq | xargs -r docker rm

    - name: Store docker logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: docker-logs${{ inputs.storage_suffix }}
        path: ./docker_logs
        retention-days: 3

    - name: Store result data
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: output-tars${{ inputs.storage_suffix }}
        path: ./tests/result/
        retention-days: 3
