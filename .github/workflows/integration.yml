
name: PiWind Integration

on:
  push:
  workflow_dispatch:
    inputs:
      pwind_branch:
        description: 'PiWind branch to test'
        required: false
      server_image:
        description: 'Server image [coreoasis/api_server]'
        required: false
        default: 'coreoasis/model_worker'
      server_tag:
        description: 'Server tag [semvar]'
        required: false
        default: 'latest'
      worker_image:
        description: 'Worker image [coreoasis/model_worker]'
        required: false
        default: 'coreoasis/model_worker'
      worker_tag:
        description: 'Worker image [semvar]'
        required: false
        default: 'latest'
      debug_mode:
        description: 'Enable verbose logging for containers [0, 1]'
        required: false
        default: '0'

jobs:
  check_results:
    runs-on: ubuntu-latest
    env:
      PWIND_BRANCH: ${{ github.ref_name }}
      SERVER_IMG: 'coreoasis/api_server'
      SERVER_TAG: 'latest'
      WORKER_IMG: 'coreoasis/model_worker'
      WORKER_TAG: 'latest'
      DEBUG: 0

    steps:
    - name: Set inputs
      run: |
       [[ -z "${{ inputs.pwind_branch }}" ]] || echo "PWIND_BRANCH=${{ inputs.pwind_branch }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.server_image }}" ]] || echo "SERVER_IMG=${{ inputs.server_image }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.server_tag }}"   ]] || echo "SERVER_TAG=${{ inputs.server_tag }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.worker_image }}" ]] || echo "WORKER_IMG=${{ inputs.worker_image }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.worker_tag }}"   ]] || echo "WORKER_TAG=${{ inputs.worker_tag }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.debug_mode }}"   ]] || echo "DEBUG=${{ inputs.debug_mode }}" >> $GITHUB_ENV

    - name: clone PiWind repository
      uses: actions/checkout@v3
      with:
        repository: OasisLMF/OasisPiWind
        ref: ${{ env.PIWIND_BRANCH }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: install test deps
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        pip-compile tests/requirements.in -o tests/requirements.txt
        pip install -r tests/requirements.txt

    - name: Run Checks
      run: pytest -v

    - name: Store result data
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: output_tars
        path: ./tests/result/
        retention-days: 3
