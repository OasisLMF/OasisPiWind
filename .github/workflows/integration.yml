name: PiWind Integration

on:
  workflow_dispatch:
    inputs:
      server_image:
        description: 'Server image [coreoasis/api_server]'
        required: false
        default: 'coreoasis/model_worker'
      server_tag:
        description: 'Server tag [semvar]'
        required: false
        default: 'latest'
      worker_image:
        description: 'Worker image [coreoasis/model_worker]'
        required: false
        default: 'coreoasis/model_worker'
      worker_tag:
        description: 'Worker image [semvar]'
        required: false
        default: 'latest'
      debug_mode:
        description: 'Enable verbose logging for containers [0, 1]'
        required: false
        default: '0'

      # If set build a piwind worker with / branch package
      # otherwise use the default worker image
      oasislmf_branch:
        description: "Branch from oasislmf to test piwind with [git ref]"
        required: false
      oasislmf_package:
        description: "Oasislmf package build to test [pkg_filename]"
        required: false



  workflow_call:
    inputs:
      piwind_branch:
        description: 'PiWind branch to test'
        type: string
      server_image:
        description: 'Server image [coreoasis/api_server]'
        required: false
        type: string
      server_tag:
        description: 'Server tag [semvar]'
        required: false
        type: string
      worker_image:
        description: 'Worker image [coreoasis/model_worker]'
        required: false
        type: string
      worker_tag:
        description: 'Worker image [semvar]'
        required: false
        type: string
      debug_mode:
        description: 'Enable verbose logging for containers [0, 1]'
        required: false
        type: string

      # If set build a piwind worker with / branch package
      # otherwise use the default worker image
      oasislmf_branch:
        description: "Branch from oasislmf to test piwind with [git ref]"
        required: false
        type: string
      oasislmf_package:
        description: "Oasislmf package build to test [pkg_filename]"
        required: false
        type: string

jobs:
  check_results:
    runs-on: ubuntu-latest
    env:
      PIWIND_BRANCH: ${{ github.ref_name }}
      SERVER_IMG: 'coreoasis/api_server'
      SERVER_TAG: 'latest'
      WORKER_IMG: 'coreoasis/model_worker'
      WORKER_TAG: 'latest'
      DEBUG: 0

    steps:
    - name: Set inputs
      run: |
       [[ -z "${{ inputs.piwind_branch }}" ]] || echo "PIWIND_BRANCH=${{ inputs.piwind_branch }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.server_image }}" ]] || echo "SERVER_IMG=${{ inputs.server_image }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.server_tag }}"   ]] || echo "SERVER_TAG=${{ inputs.server_tag }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.worker_image }}" ]] || echo "WORKER_IMG=${{ inputs.worker_image }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.worker_tag }}"   ]] || echo "WORKER_TAG=${{ inputs.worker_tag }}" >> $GITHUB_ENV
       [[ -z "${{ inputs.debug_mode }}"   ]] || echo "DEBUG=${{ inputs.debug_mode }}" >> $GITHUB_ENV

    - name: clone PiWind repository
      uses: actions/checkout@v3
      with:
        repository: OasisLMF/OasisPiWind
        ref: ${{ env.PIWIND_BRANCH }}

    # Add image build within the same workflow to avoid needing to push/pull to dockerhub
    # ----------------------------------------------
    - name: Set build arg
      if: inputs.oasislmf_package != '' || inputs.oasislmf_branch != ''
      run: |
        if [[ -n "${{ inputs.oasislmf_package }}" && -n "${{ inputs.oasislmf_branch }}" ]]; then
          echo "set either 'oasislmf_package' or 'oasislmf_branch' not both"
          exit 1
        fi

    - name: Set up Docker Buildx
      if: inputs.oasislmf_package != '' || inputs.oasislmf_branch != ''
      uses: docker/setup-buildx-action@v2

    - name: replace default image with input
      if: inputs.oasislmf_package != '' || inputs.oasislmf_branch != ''
      run: sed -i "/FROM /c\FROM ${{ env.WORKER_IMG }}:${{ env.WORKER_TAG }}" docker/Dockerfile.piwind_worker

    - name: Build and push
      if: inputs.oasislmf_package != '' || inputs.oasislmf_branch != ''
      uses: docker/build-push-action@v3
      with:
        file: ${{ env.DOCKERFILE }}
        context: .
        push: 'false'
        tags: "${{ env.WORKER_IMG }}:piwind-test-${{ github.sha }}"
        build-args: |
          oasislmf_package=${{ env.BUILD_PACKAGE }}
          oasislmf_branch=${{ env.BUILD_BRANCH }}

    - name: Override Worker image env
      if: inputs.oasislmf_package != '' || inputs.oasislmf_branch != ''
      run: echo "WORKER_TAG=piwind-test-${{ github.sha }}" >> $GITHUB_ENV

    # ----------------------------------------------

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: install test deps
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        pip-compile tests/requirements.in -o tests/requirements.txt
        pip install -r tests/requirements.txt

      # the flag '--use-running-containers' will keep the containers up after the tests complete
      # This is to store the docker-compose logs before removal
    - name: Run Checks
      run: pytest -v --use-running-containers

    - name: Create docker logs
      if: always()
      run: |
         mkdir -p docker_logs
         docker-compose ps | tail -n +3 | awk '{print $1}' | xargs -I CONTAINER bash -c "docker logs CONTAINER > docker_logs/CONTAINER.log"
         docker-compose down

    - name: Store docker logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: docker-logs
        path: ./docker_logs
        retention-days: 3

    - name: Store result data
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: output-tars
        path: ./tests/result/
        retention-days: 3
