name: build

on:
  push

env:
  # model_git_url: OasisLMF/OasisPiWind.git
  BUILD_REPO: OasisLMF/build
  BUILD_BRANCH: master
  BUILD_WORKER: false
  LAST_RELEASE_TAG: ''
  TAG_OASIS: latest
  TAG_RELEASE: ${{ github.ref_name }}-${{ github.run_number }}  # similar (split by / is missing)
  BUILD_WORKSPACE: oasis_build
  MODEL_WORKSPACE: ${{ github.workspace }}/piwind_workspace
  MODEL_SH: /buildscript/utils.sh                      # path to model build script
  MODEL_BRANCH: ${{ github.ref_name }}
  MODEL_ID: 1
  MODEL_SUPPLIER: OasisLMF
  MODEL_NAME: PiWind
  RUN_MDK: true
  MDK_BRANCH: develop
  MDK_RUN: ri
  RUN_TESTS: "control_set 0_case 1_case 2_case 3_case 4_case 5_case 6_case 7_case 8_case"
  MODEL_VERSION: '0.0.0.1'
  KEYSERVER_VERSION: '0.0.0.1'
  IMAGE_WORKER: coreoasis/model_worker                     # Docker image for worker
  TEST_MAX_RUNTIME: 190  # units to be checked

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        py-version: [3.8, 3.9]

    env:
      MODEL_DATA_job: $MODEL_WORKSPACE/model_data/PiWind
    steps:
      - name: clone PiWind repository
        uses: actions/checkout@v3
        with:
          submodules: true
          path: ${{ env.MODEL_WORKSPACE }}
      - name: clone build repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.BUILD_REPO }}
          ref: ${{ env.BUILD_BRANCH }}
          path: ${{ env.BUILD_WORKSPACE }}
      - name: test export
        run: |
          export VAR1=$TAG_OASIS
          echo $VAR1
      - name: set default vars
        run: |
          echo $VAR1
          echo "TAG_OASIS=${TAG_OASIS}" >> $GITHUB_ENV 
          echo "TAG_RELEASE=${TAG_RELEASE}" >> $GITHUB_ENV 
          echo "TAG_RUN_PLATFORM=${TAG_OASIS}" >> $GITHUB_ENV 
          echo "TAG_RUN_WORKER=${TAG_OASIS}" >> $GITHUB_ENV 
          echo "PIPELINE=buildscript/pipeline.sh" >> $GITHUB_ENV 
          echo "PIPELINE_LOAD=buildscript/utils.sh" >> $GITHUB_ENV  # needed by pipeline.sh
          echo "MDK_MODEL=${MODEL_BRANCH}" >> $GITHUB_ENV 
          echo "MODEL_VARIENT=${MODEL_NAME}" >> $GITHUB_ENV 
          echo "MODEL_TEST_DIR=${MODEL_WORKSPACE}/tests" >> $GITHUB_ENV 
          echo "MODEL_TEST_INI=test-config.ini" >> $GITHUB_ENV 
          echo "MODEL_DATA=${MODEL_WORKSPACE}/model_data/PiWind" >> $GITHUB_ENV 
          echo "KEYS_DATA=${MODEL_WORKSPACE}/keys_data/PiWind" >> $GITHUB_ENV 
          echo "OASIS_MODEL_DATA_DIR=${MODEL_WORKSPACE}" >> $GITHUB_ENV 
          # echo "MDK_MODEL=${BUILD_WORKSPACE}/buildscript/utils.sh" >> $GITHUB_ENV 
          echo "VERS_KEYS_DATA=${KEYSERVER_VERSION}" >> $GITHUB_ENV    # keyserver version to run unittest againts
          echo "PATH_MODEL_DATA=${MODEL_VERSION}" >> $GITHUB_ENV 
          echo "VERS_MODEL_DATA=${MODEL_WORKSPACE}/model_data/PiWind" >> $GITHUB_ENV   # same as MODEL_DATA
          echo "PATH_KEYS_DATA=${MODEL_WORKSPACE}/keys_data/PiWind" >> $GITHUB_ENV   # same as keys_data
          echo "TEST_DATA_DIR=${MODEL_WORKSPACE}/tests" >> $GITHUB_ENV 
          echo "MULTI_PERIL=1" >> $GITHUB_ENV     # Set the GUL alloc rule to 1 in compose

      - name: build worker
        # see open issue on if statements 
        # https://github.com/actions/runner/issues/1173
        if: env.BUILD_WORKER == 'true'
        working-directory: ${{ env.BUILD_WORKSPACE }}
        run: |
          echo "TAG_RUN_WORKER=${TAG_RELEASE}" >> $GITHUB_ENV 
          docker build --no-cache -f docker/Dockerfile.worker-git --pull --build-arg BRANCH=${{ env.MDK_BRANCH }} -t coreoasis/model_worker:${{ env.TAG_RELEASE }} .
      - name: do not build worker, update tags
        if: env.BUILD_WORKER == 'false' && env.TAG_OASIS == 'latest'
        run: |
          echo ${{ env.BUILD_WORKER }} 
          LAST_RELEASE_TAG=$(curl https://api.github.com/repos/OasisLMF/OasisPlatform/releases | jq -r '( first ) | .name')
          echo "LAST_RELEASE_TAG=${LAST_RELEASE_TAG}" >> $GITHUB_ENV 
          echo "TAG_RUN_WORKER=${LAST_RELEASE_TAG}" >> $GITHUB_ENV 
          echo "TAG_RUN_PLATFORM=${LAST_RELEASE_TAG}" >> $GITHUB_ENV 
      - name: print model vars
        working-directory: ${{ env.BUILD_WORKSPACE }}
        run: $PIPELINE print_model_vars
      - name: udate MDK branch based on model branch
        if: env.MODEL_BRANCH == 'master' || contains(env.MODEL_BRANCH, 'hotfix')
        run: echo "env.=master" >> $GITHUB_ENV 
      - name: run MDK
        if: env.RUN_MDK == 'true'
        working-directory: ${{ env.BUILD_WORKSPACE }}
        run: |
          sed -i 's/FROM.*/FROM python:${{ matrix.py-version }}/g' docker/Dockerfile.mdk-tester
          docker build -f docker/Dockerfile.mdk-tester -t mdk-runner:${{ matrix.py-version }} .
          docker run mdk-runner:${{ matrix.py-version }} --model-repo-branch ${{ env.MDK_MODEL}} --mdk-repo-branch ${{ env.MDK_BRANCH }} --model-run-mode ${{ env.MDK_RUN }}
          TEST_BASE_CMD="$PIPELINE run_test --test-output --config /var/oasis/test/$MODEL_TEST_INI"
          for t in ${{ env.RUN_TESTS }}; do $TEST_BASE_CMD --test-case $t ; done
