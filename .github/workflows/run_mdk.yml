#  ==============================================================================
#  Workflow description:
#    Runs the command line interface of OasisLMF package on the PiWind model.
#    Multiple versions of python are tested and be extending via
#    the `py-version` test matrix.
#
#    Loss results are not checked and the workflow should only fail on:
#      1. Package installation failure when pip installing 'oasislmf'
#      2. An invocation error or python exception when executing 'oasislmf model run ..'
#      3. Empty files are produced (either input files / or results)
#  ==============================================================================

name: run_mdk

on:
  push:
  workflow_dispatch:
    inputs:
      build_branch:
        description: 'Branch of build script repo - https://github.com/OasisLMF/build'
        required: true
        default: master
      mdk_branch:
        description: 'Branch to test from Oasislmf repo - https://github.com/OasisLMF/OasisLMF'
        required: true
        default: develop
      mdk_run_type:
        description: 'Loss modes to test, options are one of "[gul, il, ri]"'
        required: true
        default: ri

  workflow_call:
    inputs:
      build_branch:
        description: 'Branch of build script repo - https://github.com/OasisLMF/build'
        required: true
        type: string
      mdk_branch:
        description: 'Branch to test from Oasislmf repo - https://github.com/OasisLMF/OasisLMF'
        required: true
        type: string
      mdk_run_type:
        description: 'Loss modes to test, options are one of "[gul, il, ri]"'
        required: true
        type: string
      piwind_branch:
        description: 'Branch of PiWind to test (Only needed for remote triggers)'
        required: true
        type: string

env:
  # Fixed
  BUILD_REPO: OasisLMF/build
  BUILD_WORKSPACE: oasis_build
  MODEL_WORKSPACE: ${{ github.workspace }}/piwind_workspace

  # variable
  MODEL_BRANCH:  ${{ github.ref_name }}
  BUILD_BRANCH: 'master'
  MDK_BRANCH: 'develop'
  MDK_RUN: 'ri'

jobs:
  run_mdk:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-version: [3.8, 3.9]
    steps:

      - name: Set env (MODEL_BRANCH)
        if: inputs.piwind_branch != ''
          echo "MODEL_BRANCH=${{ inputs.piwind_branch }}" >> $GITHUB_ENV
      - name: Set env (BUILD_BRANCH)
        if: inputs.build_branch != ''
          echo "BUILD_BRANCH=${{ inputs.build_branch }}" >> $GITHUB_ENV
      - name: Set env (MDK_BRANCH)
        if: inputs.mdk_branch != ''
          echo "MDK_BRANCH=${{ inputs.mdk_branch }}" >> $GITHUB_ENV
      - name: Set env (MDK_RUN)
        if: inputs.mdk_run_type != ''
          echo "MDK_RUN=${{ inputs.mdk_run_type }}" >> $GITHUB_ENV

      - name: Set Production mode for testing master branch
        if: |
          github.event_name == 'push' &&
          (env.MDK_BRANCH == 'master' || contains(env.MDK_BRANCH, 'hotfix'))
        run: |
          echo "BUILD_WORKER=false" >> $GITHUB_ENV
          echo "PIWIND_BRANCH=master" >> $GITHUB_ENV

      - name: Update PiWind branch selection (remote call)
        if: inputs.piwind_branch != ''
        run:

      - name: clone PiWind repository
        uses: actions/checkout@v3
        with:
          submodules: true
          path: ${{ env.MODEL_WORKSPACE }}
      - name: clone build repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.BUILD_REPO }}
          ref: ${{ env.BUILD_BRANCH }}
          path: ${{ env.BUILD_WORKSPACE }}
      - name: run MDK
        working-directory: ${{ env.BUILD_WORKSPACE }}
        run: |
          sed -i 's/FROM.*/FROM python:${{ matrix.py-version }}/g' docker/Dockerfile.mdk-tester
          docker build -f docker/Dockerfile.mdk-tester -t mdk-runner:${{ matrix.py-version }} .
          docker run mdk-runner:${{ matrix.py-version }} --model-repo-branch ${{ env.MODEL_BRANCH}} --mdk-repo-branch ${{ env.MDK_BRANCH }} --model-run-mode ${{ env.MDK_RUN }}
